using System;

namespace BindingGeneratorHpp;

static class Templates
{
	public static let BoilerPlate = new Template(
                text: 
"""

/*
        Auto Generated by Willow v{version}
        DO NOT EDIT!
*/

using System;
using System.Interop;
        
""",
                id: "BoilerPlate",
                arguments: Template.Argument[?](  (StringView("version"), Template.Function[?]()))
        );
	public static let Library = new Template(
                text: 
"""

using {name};
namespace {name}
{

/// {documentation}
static class {name}
{{
    {body}
}}

}
        
""",
                id: "Library",
                arguments: Template.Argument[?](  (StringView("name"), Template.Function[?]()), (StringView("body"), Template.Function[?]()), (StringView("documentation"), Template.Function[?](  ("prefixln", "/// "))))
        );
	public static let Function = new Template(
                text: 
"""

    /// {documentation}
    [
#if {return_const}
        return: MangleConst,
#endif
		LinkName(
#if {c_mangling}
        	.C
#else
        	.CPP
#endif
		),
        LinkName("{mangle_name}"),
        CallingConvention(.{calling_conv})
    ]
    public static extern {return} {name}({parameters});
        
""",
                id: "Function",
                arguments: Template.Argument[?](  (StringView("mangle_name"), Template.Function[?]()), (StringView("c_mangling"), Template.Function[?]()), (StringView("return"), Template.Function[?]()), (StringView("return_const"), Template.Function[?]()), (StringView("name"), Template.Function[?]()), (StringView("parameters"), Template.Function[?]()), (StringView("calling_conv"), Template.Function[?]()))
        );
	public static let Struct = new Template(
                text: 
"""

    /// {documentation}
    [
#if {union}
        Union,
#endif
#if {packed}
        Packed,
#endif
        CRepr
    ]
    public struct {name}
#if {base_there}
        : {base_name}
#endif
    {{
        {body}
    }}
        
""",
                id: "Struct",
                arguments: Template.Argument[?](  (StringView("union"), Template.Function[?]()), (StringView("packed"), Template.Function[?]()), (StringView("name"), Template.Function[?]()), (StringView("body"), Template.Function[?]()), (StringView("base_there"), Template.Function[?]()), (StringView("base_name"), Template.Function[?]()), (StringView("documentation"), Template.Function[?](  ("prefixln", "/// "))))
        );
	public static let Enum = new Template(
                text: 
"""

    /// {documentation}
    [CRepr]
    public enum {name} : {type}
    {{
        {values}
    }}
        
""",
                id: "Enum",
                arguments: Template.Argument[?](  (StringView("type"), Template.Function[?]()), (StringView("name"), Template.Function[?]()), (StringView("value"), Template.Function[?]()), (StringView("documentation"), Template.Function[?](  ("prefixln", "/// "))))
        );
	public static let Parameter = new Template(
                text: 
"""

#if {const}
        [MangleConst]
#endif
#if {params}
        params
#endif
        {type} {name}
#if !{last}
        ,
#endif
        
""",
                id: "Parameter",
                arguments: Template.Argument[?](  (StringView("type"), Template.Function[?]()), (StringView("const"), Template.Function[?]()), (StringView("name"), Template.Function[?]()), (StringView("last"), Template.Function[?]()), (StringView("params"), Template.Function[?]()))
        );
	public static let TypeAlias = new Template(
                text: 
"""

    /// {documentation}
    public typealias {name} = {type};
        
""",
                id: "TypeAlias",
                arguments: Template.Argument[?](  (StringView("name"), Template.Function[?]()), (StringView("type"), Template.Function[?]()), (StringView("documentation"), Template.Function[?](  ("prefixln", "/// "))))
        );
}