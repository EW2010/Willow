<?xml version="1.1" encoding="UTF-8"?>
<!DOCTYPE binding [
    <!ELEMENT binding (template+)>
    <!ATTLIST binding target NMTOKEN #REQUIRED>
    <!ELEMENT template (#PCDATA|argument)*>
    <!ATTLIST template id NMTOKEN #REQUIRED>
    <!ELEMENT argument (prefixln?)>
    <!ATTLIST argument name NMTOKEN #REQUIRED>
    <!ELEMENT prefixln (#PCDATA)>
    <!ELEMENT c2beef EMPTY>
]>
<binding target="beef">
    <template id="BoilerPlate">
/*
        Auto Generated by Willow v{version}
        DO NOT EDIT!
*/

using System;
using System.Interop;
        <argument name="version"/>
    </template>
    <template id="Library">
using {name};
using internal {name};
namespace {name}
{

/// {documentation}
static class {name}
{{
    {body}
}}

}
        <argument name="name"/>
        <argument name="body"/>
        <argument name="documentation">
            <prefixln>/// </prefixln>
        </argument>
    </template>
    <template id="Function">
    /// {documentation}
    [
#if {return_const}
        return: MangleConst,
#endif
		LinkName(
#if {c_mangling}
        	.C
#else
        	.CPP
#endif
		),
        LinkName("{mangle_name}"),
        CallingConvention(.{calling_conv})
    ]
    public static extern {return} {name}({parameters});
        <argument name="mangle_name"/>
        <argument name="c_mangling"/>
        <argument name="return"/>
        <argument name="return_const"/>
        <argument name="name"/>
        <argument name="parameters"/>
        <argument name="calling_conv"/>
    </template>
    <template id="Struct">
    /// {documentation}
    [
#if {union}
        Union,
#endif
#if {packed}
        Packed,
#endif
        CRepr
    ]
    public struct {name}
#if {base_there}
        : {base_name}
#endif
    {{
        {body}
    }}
        <argument name="union"/>
        <argument name="packed"/>
        <argument name="name"/>
        <argument name="body"/>
        <argument name="base_there"/>
        <argument name="base_name"/>
        <argument name="documentation">
            <prefixln>/// </prefixln>
        </argument>
    </template>
    <template id="Enum">
    /// {documentation}
    [CRepr]
    public enum {name} : {type}
    {{
        {values}
    }}
        <argument name="type"/>
        <argument name="name"/>
        <argument name="value"/>
        <argument name="documentation">
            <prefixln>/// </prefixln>
        </argument>
    </template>
    <template id="Parameter">
#if {const}
        [MangleConst]
#endif
#if {params}
        params
#endif
        {type} {name}
#if !{last}
        ,
#endif
        <argument name="type"/>
        <argument name="const"/>
        <argument name="name"/>
        <argument name="last"/>
        <argument name="params"/>
    </template>
    <template id="TypeAlias">
    /// {documentation}
    public typealias {name} = {type};
        <argument name="name"/>
        <argument name="type"/>
        <argument name="documentation">
            <prefixln>/// </prefixln>
        </argument>
    </template>
    <template id="Constructor">
        /// {documentation}
        [LinkName(.CPP), CallingConvention(.{calling_conv})]
        public extern
#if {destructor}
        ~this
#else
        this
#endif
        ({parameters});
        <argument name="calling_conv"/>
        <argument name="destuctor"/>
        <argument name="parameters"/>
        <argument name="documentation">
            <prefixln>/// </prefixln>
        </argument>
    </template>
</binding>